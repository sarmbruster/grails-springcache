Caches referenced by the annotations can be configured, either in an @ehcache.xml@ (usually kept in the @grails-app/conf@ directory) file, using @EhCacheFactoryBean@ definitions in @grails-app/conf/spring/resources.groovy@ or via @Config.groovy@. If you do not configure caches individually they will be created on demand using defaults.

h3. Configuring caches with resources.groovy

You can configure caches in @grails-app/conf/spring/resources.groovy@ using instances of Spring's "EhCacheFactoryBean":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/cache/ehcache/EhCacheFactoryBean.html class. For example:

h4. grails-app/conf/spring/resources.groovy

{code}
pirateCache(EhCacheFactoryBean) { bean ->
    cacheManager = ref("springcacheCacheManager")
    cacheName = "pirateCache"
    // these are just examples of properties you could set
    eternal = false
    diskPersistent = false
    memoryStoreEvictionPolicy = "LRU"
}
{code}

You can inherit default cache properties from those defined in @Config.groovy@ by setting the factory bean's parent to '@springcacheDefaultCache@'. For example:

{code}
pirateCache(EhCacheFactoryBean) { bean ->
    bean.parent = ref("springcacheDefaultCache")
    cacheName = "pirateCache"
    // set any properties unique to this cache
    memoryStoreEvictionPolicy = "LRU"
}
{code}

h3. Configuring caches with Config.groovy

The Springcache plugin enables you to define caches in @Config.groovy@ for convenience. For example:

h4. grails-app/conf/Config.groovy

{code}
springcache {
    defaults {
        // set default cache properties that will apply to all caches that do not override them
        eternal = false
        diskPersistent = false
    }
    caches {
        pirateCache {
            // set any properties unique to this cache
            memoryStoreEvictionPolicy = "LRU"
        }
    }
}
{code}

Under the hood this is simply setting up @EhCacheFactoryBean@ instances in the Spring context, so it is up to you whether you prefer to use @resources.groovy@ or @Config.groovy@ there is not much difference.

The properties shown are just examples, see the "EhCacheFactoryBean":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/cache/ehcache/EhCacheFactoryBean.html documentation for full details of all the properties you can set.


h3. exposing ehcache to JMX

Ehcache is already prepared to expose itself to JMX. To enable this use the following snippet in @grails-app/conf/Config.groovy@:

{code}
springcache {
    jmx {
        cacheManager = true
        cache = true
        cacheConfiguration = true
        cacheStatistics = true
    }
}
{code}

For details, see [Ehcache's JMX manual|http://ehcache.org/documentation/operations/jmx].